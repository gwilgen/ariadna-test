package ariadna.services.populate;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import ariadna.models.Event;
import ariadna.models.EventSource;
import ariadna.services.util.ConnectionProvider;

public abstract class AbstractSQLPopulateService extends AbstractPopulateService implements ConnectionProvider {
	
	@Override
	public List<EventSource> getEventSources() {
		try (Connection conn = getConnection()) {
			try (PreparedStatement stmt = conn.prepareStatement("select id, name from event_sources")) {
				try (ResultSet rs = stmt.executeQuery()) {
					List<EventSource> result = new ArrayList<>();
					while (rs.next()) {
						result.add(new EventSource(rs.getInt("id"), rs.getString("name")));
					}
					return result;
				}
			}
		} catch (Exception e) {
			throw new RuntimeException("Could not create the Event", e);
		}
	}
	
	@Override
	public Event createEvent(Integer sourceId, Timestamp timestamp, Double value) {
		try (Connection conn = getConnection()) {
			try (PreparedStatement stmt = conn.prepareStatement("insert into events (source_id, timestamp, value) values (?, ?, ?)", Statement.RETURN_GENERATED_KEYS)) {
				stmt.setInt(1, sourceId);
				stmt.setTimestamp(2, timestamp);
				stmt.setDouble(3, value);
				stmt.executeUpdate();
				try (ResultSet rs = stmt.getGeneratedKeys()) {
					if (!rs.next()) {
						throw new RuntimeException("ID was not autogenerated");
					}
					Event result = new Event(sourceId, timestamp, value);
					result.setId(rs.getLong(1));
					return result;
				}
			}
		} catch (Exception e) {
			throw new RuntimeException("Could not create the Event", e);
		}
	}


}
